<project name="Function Drawer" default="build" basedir=".">

	<property name="src.dir" location="src" />
	<property name="lib.dir" location="lib" />
	<property name="test.src.dir" location="test" />
	<property name="parser.dir" location="${src.dir}/grammar" />

	<property name="build.dir" location="build" />
	<property name="build.class.dir" location="${build.dir}/classes" />
	<property name="build.test.dir" location="${build.dir}/test" />
	<property name="build.deploy.dir" location="${build.dir}/deploy" />
	<property name="build.fprod" location="${build.dir}/deploy/fdrawer.jar" />


	<property name="grammar.file" value="${parser.dir}/Expr.g" />
	<property name="eval.file" value="${parser.dir}/Eval.g" />
	<property name="reports.tests" value="testresult" />


	<target name="parser" depends="clean.parser" description="Generate java lexer and parser from ANTLR grammar file">

		<!--		<antlr target="${grammar}" outputdirectory="${src.dir}/parser" /> -->

		<java classname="org.antlr.Tool" classpath="${lib.dir}/antlr-3.1.3.jar">
			<arg value="${grammar.file}" />
		</java>

		<java classname="org.antlr.Tool" classpath="${lib.dir}/antlr-3.1.3.jar">
			<arg value="${eval.file}" />
		</java>

		<move file="${parser.dir}/ExprLexer.java" todir="${src.dir}/parser" />
		<move file="${parser.dir}/ExprParser.java" todir="${src.dir}/parser" />
		<move file="${parser.dir}/Eval.java" todir="${src.dir}/parser" />
		<move file="${basedir}/Expr.tokens" todir="${src.dir}/parser" />
		<move file="${basedir}/Eval.tokens" todir="${src.dir}/parser" />

	</target>

	<target name="clean.parser" description="Removes generated lexer and parser files">
		<delete>
			<fileset dir="${src.dir}/parser">
				<include name="*" />
				<exclude name="UncheckedParserException.java" />
				<exclude name="UndefinedVariableException.java" />
			</fileset>
		</delete>
	</target>

	<target name="clean" depends="clean.parser">
		<delete dir="${build.dir}" />
	</target>

	<target name="init">
		<mkdir dir="${build.dir}" />
		<mkdir dir="${build.class.dir}" />
		<mkdir dir="${build.test.dir}" />
		<mkdir dir="${build.deploy.dir}" />
	</target>

	<path id="compile.classpath">
		<pathelement location="${lib.dir}/antlr-3.1.3.jar" />
	</path>

	<target name="compile" depends="parser, init" description="Compiles all .java project files">
		<javac srcdir="${src.dir}" destdir="${build.class.dir}" classpathref="compile.classpath" />
	</target>

	<path id="test.classpath">
		<path refid="compile.classpath" />
		<pathelement location="${lib.dir}/junit-4.7.jar" />
		<pathelement location="${build.class.dir}" />
		<pathelement location="${build.test.dir}" />
	</path>


	<target name="compile.tests" depends="compile" description="Compiles all test files">
		<javac srcdir="${test.src.dir}" destdir="${build.test.dir}" classpathref="test.classpath" />
	</target>

	<target name="test" depends="compile.tests" description="Run all unit tests">
		<junit printsummary="true" haltonfailure="true">
			<classpath refid="test.classpath" />
			<formatter type="brief" usefile="false" />
			<formatter type="xml" />
			<batchtest todir="${reports.tests}">
				<fileset dir="${build.test.dir}" includes="**/*Test.class" />
			</batchtest>
		</junit>
	</target>

	<target name="build" depends="test" description="Builds application. Executable jar: fdrawer.jar">
		<unzip src="${lib.dir}/antlr-3.1.3.jar" dest="${build.class.dir}" />
		<jar destfile="${build.fprod}" basedir="${build.class.dir}" includes="**/*.class">
			<manifest>
				<attribute name="Main-Class" value="ui.DrawingForm" />
			</manifest>
		</jar>
	</target>


	<target name="run" description="run it">
		<available file="${build.fprod}" property="jar.exists" />
		<fail unless="jar.exists" message="fdrawer.jar doesn't exist!" />
		<java jar="${build.dir}/deploy/fdrawer.jar" fork="true" failonerror="true" />
	</target>


	<target name="rebuild" depends="clean, build" description="Rebuilds application" />


</project>

